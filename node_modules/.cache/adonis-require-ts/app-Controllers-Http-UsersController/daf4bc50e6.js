"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
class UsersController {
    async create({ view }) {
        return view.render('users/create');
    }
    async store({ auth, request, response }) {
        const name = request.input('name');
        const email = request.input('email');
        const password = request.input('password');
        const confirmPassword = request.input('confirmPassword');
        if (password !== confirmPassword) {
            return response.redirect().toRoute('users.create');
        }
        try {
            const user = await User_1.default.create({ email, password, name });
            await auth.use('web').login(user);
            return response.redirect().toRoute('home');
        }
        catch {
            return response.redirect().toRoute('users.create');
        }
    }
    async edit({ view }) {
        return view.render('users.edit');
    }
    async update({ auth, request, response }) {
        const name = request.input('name');
        const email = request.input('email');
        const password = request.input('password');
        const confirmPassword = request.input('confirmPassword');
        if (password !== confirmPassword) {
            return response.redirect().toRoute('users.edit');
        }
        const userId = auth.user?.id;
        try {
            const user = await User_1.default.findOrFail(userId);
            user.name = name;
            user.email = email;
            user.password = password;
            await user.save();
            return response.redirect().toRoute('home');
        }
        catch {
            return response.redirect().toRoute('users.edit');
        }
    }
    async home({ view }) {
        return view.render('home');
    }
}
exports.default = UsersController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlcnNDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVXNlcnNDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsaUZBQWtDO0FBRWxDLE1BQXFCLGVBQWU7SUFDekIsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFDLElBQUksRUFBc0I7UUFDM0MsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFBO0lBQ3RDLENBQUM7SUFFTSxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQXNCO1FBQzdELE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDbEMsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUNwQyxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQzFDLE1BQU0sZUFBZSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtRQUV4RCxJQUFHLFFBQVEsS0FBSyxlQUFlLEVBQUU7WUFDN0IsT0FBTyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFBO1NBQ3JEO1FBRUQsSUFBSTtZQUNBLE1BQU0sSUFBSSxHQUFHLE1BQU0sY0FBSSxDQUFDLE1BQU0sQ0FBQyxFQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFDLENBQUMsQ0FBQTtZQUN2RCxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO1lBQ2pDLE9BQU8sUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQTtTQUM3QztRQUFDLE1BQU07WUFDSixPQUFPLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUE7U0FDckQ7SUFHTCxDQUFDO0lBRU0sS0FBSyxDQUFDLElBQUksQ0FBRSxFQUFDLElBQUksRUFBc0I7UUFDMUMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFBO0lBQ3BDLENBQUM7SUFFTSxLQUFLLENBQUMsTUFBTSxDQUFFLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQXNCO1FBQy9ELE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDbEMsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUNwQyxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQzFDLE1BQU0sZUFBZSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtRQUV4RCxJQUFHLFFBQVEsS0FBSyxlQUFlLEVBQUM7WUFDNUIsT0FBTyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFBO1NBQ25EO1FBRUQsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUE7UUFFNUIsSUFBSTtZQUNBLE1BQU0sSUFBSSxHQUFHLE1BQU0sY0FBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQTtZQUMxQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQTtZQUNoQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQTtZQUNsQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQTtZQUV4QixNQUFNLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQTtZQUNqQixPQUFPLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUE7U0FDN0M7UUFDRCxNQUFNO1lBQ0YsT0FBTyxRQUFRLENBQUMsUUFBUSxFQUFFLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFBO1NBQ25EO0lBQ0wsQ0FBQztJQUVNLEtBQUssQ0FBQyxJQUFJLENBQUUsRUFBQyxJQUFJLEVBQXNCO1FBQzFDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUM5QixDQUFDO0NBQ0o7QUEzREQsa0NBMkRDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBIdHRwQ29udGV4dENvbnRyYWN0IH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9IdHRwQ29udGV4dCdcbmltcG9ydCBVc2VyIGZyb20gJ0FwcC9Nb2RlbHMvVXNlcidcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXNlcnNDb250cm9sbGVyIHtcbiAgICBwdWJsaWMgYXN5bmMgY3JlYXRlKHt2aWV3fTogSHR0cENvbnRleHRDb250cmFjdCl7XG4gICAgICAgIHJldHVybiB2aWV3LnJlbmRlcigndXNlcnMvY3JlYXRlJylcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgc3RvcmUoe2F1dGgsIHJlcXVlc3QsIHJlc3BvbnNlfTogSHR0cENvbnRleHRDb250cmFjdCl7XG4gICAgICAgIGNvbnN0IG5hbWUgPSByZXF1ZXN0LmlucHV0KCduYW1lJylcbiAgICAgICAgY29uc3QgZW1haWwgPSByZXF1ZXN0LmlucHV0KCdlbWFpbCcpXG4gICAgICAgIGNvbnN0IHBhc3N3b3JkID0gcmVxdWVzdC5pbnB1dCgncGFzc3dvcmQnKVxuICAgICAgICBjb25zdCBjb25maXJtUGFzc3dvcmQgPSByZXF1ZXN0LmlucHV0KCdjb25maXJtUGFzc3dvcmQnKVxuXG4gICAgICAgIGlmKHBhc3N3b3JkICE9PSBjb25maXJtUGFzc3dvcmQpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNwb25zZS5yZWRpcmVjdCgpLnRvUm91dGUoJ3VzZXJzLmNyZWF0ZScpXG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXIuY3JlYXRlKHtlbWFpbCwgcGFzc3dvcmQsIG5hbWV9KVxuICAgICAgICAgICAgYXdhaXQgYXV0aC51c2UoJ3dlYicpLmxvZ2luKHVzZXIpXG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UucmVkaXJlY3QoKS50b1JvdXRlKCdob21lJylcbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICByZXR1cm4gcmVzcG9uc2UucmVkaXJlY3QoKS50b1JvdXRlKCd1c2Vycy5jcmVhdGUnKVxuICAgICAgICB9XG5cbiAgICAgICAgXG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGVkaXQgKHt2aWV3fTogSHR0cENvbnRleHRDb250cmFjdCl7ICAgICAgICBcbiAgICAgICAgcmV0dXJuIHZpZXcucmVuZGVyKCd1c2Vycy5lZGl0JylcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgdXBkYXRlICh7YXV0aCwgcmVxdWVzdCwgcmVzcG9uc2V9OiBIdHRwQ29udGV4dENvbnRyYWN0KXsgICAgICAgIFxuICAgICAgICBjb25zdCBuYW1lID0gcmVxdWVzdC5pbnB1dCgnbmFtZScpXG4gICAgICAgIGNvbnN0IGVtYWlsID0gcmVxdWVzdC5pbnB1dCgnZW1haWwnKVxuICAgICAgICBjb25zdCBwYXNzd29yZCA9IHJlcXVlc3QuaW5wdXQoJ3Bhc3N3b3JkJylcbiAgICAgICAgY29uc3QgY29uZmlybVBhc3N3b3JkID0gcmVxdWVzdC5pbnB1dCgnY29uZmlybVBhc3N3b3JkJylcbiAgICAgICAgXG4gICAgICAgIGlmKHBhc3N3b3JkICE9PSBjb25maXJtUGFzc3dvcmQpe1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnJlZGlyZWN0KCkudG9Sb3V0ZSgndXNlcnMuZWRpdCcpXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB1c2VySWQgPSBhdXRoLnVzZXI/LmlkXG4gICAgICAgIFxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXIuZmluZE9yRmFpbCh1c2VySWQpXG4gICAgICAgICAgICB1c2VyLm5hbWUgPSBuYW1lXG4gICAgICAgICAgICB1c2VyLmVtYWlsID0gZW1haWxcbiAgICAgICAgICAgIHVzZXIucGFzc3dvcmQgPSBwYXNzd29yZFxuXG4gICAgICAgICAgICBhd2FpdCB1c2VyLnNhdmUoKVxuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnJlZGlyZWN0KCkudG9Sb3V0ZSgnaG9tZScpXG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2gge1xuICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnJlZGlyZWN0KCkudG9Sb3V0ZSgndXNlcnMuZWRpdCcpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgaG9tZSAoe3ZpZXd9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG4gICAgICAgIHJldHVybiB2aWV3LnJlbmRlcignaG9tZScpXG4gICAgfVxufVxuIl19